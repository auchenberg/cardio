#!/usr/bin/env node

var optimist = require('optimist'),
    mime = require('mime'),
    canonicalizeObject = require('../lib/canonicalizeObject'),
    commandLineOptions = optimist
        .usage('Measure your code bases fitness\n$0 [-r <inputRootDirectory>] <htmlFile(s)>')
        .options('h', {
            alias: 'help',
            describe: 'Show this help',
            type: 'boolean',
            default: false
        })
        .options('r', {
            alias: 'root',
            describe: 'Path to your web root. Omission will make $0 take a best guess',
            type: 'string',
            demand: false
        })
        .options('check', {
            describe: 'A JavaScript expression to evaluate. The process will exit with a non-zero code if the expression evaluates to true (for use with git bisect)',
            type: 'string',
            demand: false
        })
        .wrap(72)
        .argv;

if (commandLineOptions.h) {
    optimist.showHelp();
    process.exit();
}

var urlTools = require('assetgraph/lib/util/urlTools'),
    rootUrl = commandLineOptions.root && urlTools.urlOrFsPathToUrl(commandLineOptions.root, true),
    inputUrls;

if (commandLineOptions._.length > 0) {
    inputUrls = commandLineOptions._.map(function (urlOrFsPath) {
        return urlTools.urlOrFsPathToUrl(urlOrFsPath, false);
    });
    if (!rootUrl) {
        rootUrl = urlTools.findCommonUrlPrefix(inputUrls.filter(function (inputUrl) {
            return (/^file:/).test(inputUrl);
        }));
    }
} else if (rootUrl && /^file:/.test(rootUrl)) {
    inputUrls = [rootUrl + '**/*.html'];
    console.warn('No input files specified, defaulting to ' + inputUrls[0]);
} else {
    optimist.showHelp();
    process.exit(1);
}

if (!rootUrl && inputUrls.length === 1) {
    rootUrl = inputUrls[0];
}

var AssetGraph = require('assetgraph'),
    query = AssetGraph.query,
    followRelationsQueryObj = query.not({
        type: 'HtmlAnchor',
        to: {
            url: /^https?:/
        }
    }),
    colors = require('colors'),
    notepad = {
        timestamp: Math.floor(Date.now() / 1000)
    };

Object.keys(commandLineOptions)
    .forEach(function (commandLineOptionName) {
        if (/^meta-/.test(commandLineOptionName)) {
            notepad[commandLineOptionName.replace(/^meta-/, '')] = commandLineOptions[commandLineOptionName];
        }
    });


new AssetGraph({root: rootUrl})
    .on('error', function (err) {
        console.error(' ✘ '.red + err.message);
    })
    .on('addAsset', function (asset) {
        if (asset.url) {
            console.warn(' ✔ '.green + asset.url);
        }
    })
    .registerRequireJsConfig()
    .loadAssets(inputUrls)
    .populate({followRelations: followRelationsQueryObj})
    .queue(function fixBaseAssetsOfUnresolvedOutgoingRelationsFromHtmlFragments(assetGraph) {
        assetGraph.findRelations({from: {type: 'Html', isFragment: true, isInitial: true}}, true).forEach(function (relation) {
            if (relation._baseAssetPath === null) {
                delete relation._baseAssetPath;
            }
        });
    })
    .populate({followRelations: followRelationsQueryObj, startAssets: {type: 'Html', isFragment: true, isInitial: true}})
    .compileLessToCss()
    .compileStylusToCss()
    .compileCoffeeScriptToJavaScript()

    // CSS Complexity
    .queue(require('../lib/transforms/measureCssComplexity')({type: 'Css'}, notepad))

    // JavaScript complexity
    .queue(require('../lib/transforms/measureJavaScriptComplexity')({type: 'JavaScript'}, notepad))

    // HTML complexity
    .queue(require('../lib/transforms/measureHtmlComplexity')({type: 'Html'}, notepad))

    // Assets sizes
    .queue(function (assetGraph) {
        notepad.assetSizes = {};
        notepad.assetCount = {};
        assetGraph.findAssets({isInline: false, isLoaded: true}).forEach(function (asset) {
            var type = asset.type;
            if (type === 'Asset') {
                type = asset.contentType;
                var extension = (asset.extension || '').replace(/^[^.]*\./, '');
                if (extension && type === 'application/octet-stream') {
                    if (extension in mime.types) {
                        type = mime.types[extension];
                    } else {
                        type = extension;
                    }
                }
            }
            notepad.assetCount[type] = (notepad.assetCount[type] || 0) + 1;
            notepad.assetSizes[type] = (notepad.assetSizes[type] || 0) + asset.rawSrc.length;
        })
        notepad = canonicalizeObject(notepad);
    })

    // Console output
    .queue(function (assetGraph) {
        if (commandLineOptions.check) {
            var checkFunction;
            try {
                checkFunction = new Function("notepad", "with (notepad) {return " + commandLineOptions.check + ";}");
            } catch (e) {
                console.error('Invalid check function syntax: ' + commandLineOptions.check);
                process.exit(1);
            }
            try {
                process.exit(checkFunction(notepad) ? 1 : 0);
            } catch (e) {
                // The check function threw an exception. That probably means it's deferring a value that doesn't
                // exist, so don't fail (this behavior is debatable).
                process.exit(0);
            }
        } else {
            console.warn("And the verdict's in:");
            console.log(JSON.stringify(notepad, null, 4));
        }
    })

    .run(function (err) {
        if (err) {
            throw err;
        }
    });
